# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code, run tests and deploy to GitHub Pages
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI and Deploy to Pages

on:
  push:
    branches: [ "pages" ]
  pull_request:
    branches: [ "pages" ]
  workflow_dispatch:

# 设置GITHUB_TOKEN的权限，以允许部署到GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# 允许只有一个并发部署，跳过在正在进行的运行和最新排队的运行之间排队的运行。
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.20.2] # 建议根据项目实际支持的Node.js版本调整
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🧰 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn' # 使用npm缓存，如果你用yarn，可考虑改为' yarn '或根据需要设置

    - name: 📦 Install dependencies (yarn)
      run: |
        yarn install --frozen-lockfile # 使用 --frozen-lockfile 可以确保lockfile一致
        npx update-browserslist-db@latest

    - name: 🛠️ Build project
      run: |
        yarn build
        # 在构建后创建 .nojekyll 文件
        touch docs/.nojekyll
        
    # - name: 🔍 Check for changes to yarn.lock
    #   id: check_changes
    #   run: |
    #     # 检查yarn.lock是否有更改
    #     if git diff --exit-code --quiet yarn.lock; then
    #       echo "lockfile_changed=false" >> $GITHUB_OUTPUT
    #       echo "✅ yarn.lock 没有变化，无需推送。"
    #     else
    #       echo "lockfile_changed=true" >> $GITHUB_OUTPUT
    #       echo "📝 yarn.lock 已更新，准备提交和推送。"
    #       git diff yarn.lock # 可选：显示变更内容
    #     fi

    # - name: 💾 Commit and push updated yarn.lock
    #   if: steps.check_changes.outputs.lockfile_changed == 'true'
    #   run: |
    #     # 配置Git用户（使用GitHub Actions bot信息）
    #     git config --global user.name "github-actions[bot]"
    #     git config --global user.email "github-actions[bot]@users.noreply.github.com"

    #     # 暂存发生变化的yarn.lock文件
    #     git add yarn.lock

    #     # 提交更改
    #     git commit -m "chore: update yarn.lock file [skip ci]"

    #     # 推送到当前分支
    #     # 使用 `--no-verify` 跳过可能存在的pre-push钩子（可选）
    #     git push origin HEAD:${{ github.ref_name }} --no-verify
    #     echo "✅ 已更新 yarn.lock 并推送到分支 ${{ github.ref_name }}"

    - name: 📂 Upload production-ready build artifacts
      uses: actions/upload-pages-artifact@v3 # 上传构建产物，为部署做准备
      with:
        path: ./docs # 关键：这里需要替换为你的项目构建输出目录，例如 'dist', 'build', 'out', 'public' 等

  # 部署作业，依赖于构建作业的完成
  deploy:
    environment: # 定义部署环境，可在Git仓库的Environments中查看部署历史
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }} # 部署后输出的URL

    runs-on: ubuntu-latest
    needs: build # 确保在build作业完成后运行

    steps:
    - name: 🚀 Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4 # 这是官方推荐的部署Pages的Action
